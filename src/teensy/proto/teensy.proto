// Return data from all the sensors on the teensy to be read by the pi

// RECOMPILE teensy_pb2.py IF THIS FILE IS CHANGED!
// https://www.geeksforgeeks.org/how-to-install-protocol-buffers-on-windows/
// 1. Compile .proto with `protoc src\teensy\proto\teensy.proto  --python_out=./`
// 2. Copy and replace "src\sailbot\sailbot\protobuf\teensy_pb2.py" with the new version

syntax = "proto3";

// package sailbot;

message Data {
    // Optional fields have an implicit "Data.has_controller", etc.
    // Use to check if any field is null when parsing
    optional RCData rc_data = 1;
    optional Command command = 2;
    optional WindVane windvane = 3;
    optional WaterSensors water_sensors = 4;
    optional GPSData gps = 5;
    optional IMU imu = 6;
    optional Servos servos = 7;
}

// RC Controller State
message RCData {
    int32 left_analog_y = 1;
    int32 right_analog_x = 2;
    int32 right_analog_y = 3;
    int32 left_analog_x = 4;
    int32 front_left_switch1 = 5;
    int32 front_left_switch2 = 6;
    int32 front_right_switch = 7;
    int32 top_left_switch = 8;
    int32 top_right_switch = 9;
    int32 potentiometer = 10;
}

// String commands from laptop LoRa transceiver
message Command {
    string msg = 1;
}

message WindVane {
    int32 wind_angle = 1;
}

message WaterSensors {
    int32 water_level = 1;
}

message GPSData {
    float lat = 1;
    float lon = 2;
    float speed = 3; // (m/s)
}

message IMU {
    // Quaternions for deriving the orientation (pitch, roll, yaw) of the boat
    float roll = 1;
    float pitch = 2;
    float yaw = 3;
}

message Servos {
    int32 sail = 1;
    int32 jib = 2;
    int32 rudder = 3;
}