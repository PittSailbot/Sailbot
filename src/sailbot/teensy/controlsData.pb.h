/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_CONTROLSDATA_PB_H_INCLUDED
#define PB_CONTROLSDATA_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ControlData {
    int32_t left_analog_x;
    int32_t left_analog_y; /* Sail */
    int32_t right_analog_x; /* Rudder */
    int32_t right_analog_y;
    int32_t front_left_switch; /* Offset mode (0 - Rudder, 2 - Sail) */
    int32_t left_potentiometer; /* Offset */
    int32_t front_right_switch; /* Autonomy (0 - Autonomous, 2 - RC) */
    int32_t top_left_switch;
    int32_t top_right_switch;
} ControlData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ControlData_init_default                 {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define ControlData_init_zero                    {0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ControlData_left_analog_x_tag            1
#define ControlData_left_analog_y_tag            2
#define ControlData_right_analog_x_tag           3
#define ControlData_right_analog_y_tag           4
#define ControlData_front_left_switch_tag        5
#define ControlData_left_potentiometer_tag       6
#define ControlData_front_right_switch_tag       7
#define ControlData_top_left_switch_tag          8
#define ControlData_top_right_switch_tag         9

/* Struct field encoding specification for nanopb */
#define ControlData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    left_analog_x,     1) \
X(a, STATIC,   SINGULAR, INT32,    left_analog_y,     2) \
X(a, STATIC,   SINGULAR, INT32,    right_analog_x,    3) \
X(a, STATIC,   SINGULAR, INT32,    right_analog_y,    4) \
X(a, STATIC,   SINGULAR, INT32,    front_left_switch,   5) \
X(a, STATIC,   SINGULAR, INT32,    left_potentiometer,   6) \
X(a, STATIC,   SINGULAR, INT32,    front_right_switch,   7) \
X(a, STATIC,   SINGULAR, INT32,    top_left_switch,   8) \
X(a, STATIC,   SINGULAR, INT32,    top_right_switch,   9)
#define ControlData_CALLBACK NULL
#define ControlData_DEFAULT NULL

extern const pb_msgdesc_t ControlData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ControlData_fields &ControlData_msg

/* Maximum encoded size of messages (where known) */
#define CONTROLSDATA_PB_H_MAX_SIZE               ControlData_size
#define ControlData_size                         99

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
