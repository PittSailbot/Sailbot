// Return data from all the sensors on the teensy to be read by the pi

// RECOMPILE src/sailbot/sailbot/telemetry/protobuf/teensy_pb2.py IF THIS FILE IS CHANGED!
// https://www.geeksforgeeks.org/how-to-install-protocol-buffers-on-windows/
// Compile .proto with `protoc teensy.proto --python_out=./`

syntax = "proto3";

// package sailbot;

message Data {
    // Optional fields have an implicit "Data.has_controller", etc.
    // Use to check if any field is null when parsing
    optional Controller controller = 1;
    optional Command command = 2;
    optional WindVane windvane = 3;
    optional WaterSensors water_sensors = 4;
    optional GPSData gps = 5;
    optional IMU imu = 6;
}

// RC Controller State
message Controller {
    int32 left_analog_y = 1;
    int32 right_analog_x = 3;
    int32 right_analog_y = 2;
    int32 left_analog_x = 4;
    int32 front_left_switch1 = 5;
    int32 front_left_switch2 = 6;
    int32 front_right_switch = 7;
    int32 top_left_switch = 8;
    int32 top_right_switch = 9;
    int32 potentiometer = 10;
}

// String commands from laptop LoRa transceiver
message Command {
    string msg = 1;
}

message WindVane {
    int32 wind_angle = 1;
}

message WaterSensors {
    optional bool sensor1_is_wet = 1;
    optional bool sensor2_is_wet = 2;
    optional bool sensor3_is_wet = 3;
}

message GPSData {
    float lat = 1;
    float lon = 2;
    float speed = 3; // (m/s)
}

message IMU {
    // Quaternions for deriving the orientation (pitch, roll, yaw) of the boat
    float qw = 1;
    float qx = 2;
    float qy = 3;
    float qz = 4;
}