# Stores constants used throughout code
# There are 2 copies of this file, both should be kept up to date
# one is located in ./ the other is in ./Main
[MAIN]
device = pi
ardu_port = /dev/ttyACM0
ardu_port2 = /dev/ttyACM1
ardu_port3 = /dev/ttyACM2
acceptable_range = 5e-06
receive_buffer_size = 2048
no_go_angle = 45
baudrate = 115200
img_accuracy = 10
log_path = \logs

[MODES]
MOD_RC = 0
MOD_COLLISION_AVOID = 1
MOD_PRECISION_NAVIGATE = 2
MOD_ENDURANCE = 3
MOD_STATION_KEEPING = 4
MOD_SEARCH = 5

[MOVEMENT]
disable_tacking = 1

[CONSTANTS]
# The distance at which a waypoint is considered reached
reached_waypoint_distance = 3
angle_margin_of_error = 5
sail_angle_min = 0
sail_angle_max = 90
rudder_angle_min = -45
rudder_angle_max = 45
sail_min_angle = 0
sail_max_angle = 90
win_title = Oh God Yep
window_width = 800
window_height = 600
rotationSmoothingConst = 4 #larger number means smoother rotating and will prevent oscillation but causes turning to be slower
controllerRudderDeadZoneDegs = 4
reachedGPSThreshhold = 5
P = 0
I = 0
D = 0

[ODRIVE]
motorKV = 280
odrivecurrentlimit = 40
odrivebreakresistor = .5

posGain0 = 65
velGain0 = 5
velIntegratorGain0 = 15
velLimit0 = 1.0

posGain1 = 65
velGain1 = 4.125
velIntegratorGain1 = 20
velLimit1 = 0.5

odriveEncoderCPR0 = 8192
odrivepolepairs0 = 7
odriveEncoderCPR1 = 8192
odrivepolepairs1 = 7

currentLimit = 40

odriveSailRotations = 2.3
odriveRudderRotations = 0.5

[CAMERA]
source = 0
resolution_width = 640
resolution_height = 640

[CAMERASERVOS]
# Yaw and Pitch assumed to have same range limits
max_angle = 180
min_angle = 0
default_angle = 90

# Servo connection ports, if inputs are reversed then switch
# If servos don't move try setting ports to 2 and 3
pitch_port = 0
yaw_port = 1

# True/False, when camera is flipped upside down
reverse_pitch = 1


[OBJECTDETECTION]
weights = sailbot/CV/buoy_weights.pt
conf_thresh = 0.6

# Used to estimate GPS from a detection
# Take a picture of a buoy at a measured distance using the sailbot camera
# Then enter the distance (m) and width (px) of the buoy
# TODO: ENTER AT COMPETITION
distance_from_buoy = 5
apparent_buoy_width_px = 50
# Actual width of the buoy (m)
# RECHECK AT COMPETITION
real_buoy_width = 0.25

center_acceptance = 0.8 #0.2
SCAN_minor_thresh = 0.85
SCAN_major_steps = 3


[SEARCH]
# The furthest distance that the boat can reliably detect a buoy (in meters)
# Used to auto generate a search path
# UNTESTED!
max_detection_distance = 20

# Buoys detected X meters outside of the search radius will be ignored
search_radius_tolerance = 8

# GPS points within X meters will be pooled together
heatmap_chunk_radius = 3
# The required confidence level for the boat to switch from searching to moving towards a buoy
# Most detections are between 0.7-0.95 so a threshold of 3 would require 4 detections before the boat diverts course
# Setting to 0 means the boat will move towards the first detection it sees
# Raise or lower to change boat's 'move to a detection' sensitivity
heatmap_pooled_confidence_threshold = 1.8
# If the boat is tracking a buoy and can't detect it for X sequential captures then abandon and blacklist that GPS point
# Set to -1 to disable abandoning target
tracking_abandon_threshold = -1

# Distance in meters for the boat to detect collisions with the buoy
ramming_distance = 2
# If the distance to the buoy is less than this then signal and end the event
collision_sensitivity = 0.3

